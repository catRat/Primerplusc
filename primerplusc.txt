C语言的起源

C language is a professional programming language.
贝尔实验室的Dennis Ritchie在1972年开发了C，当时他正与Ken Thompson一起设计UNIX操作系统。
在过去的30年中，C已经成为最重要和最流行的编程语言之一。过去10年中，许多人从C转而使用更强大的C++语言，但C有它自身的优势，任然是一种重要的语言，而且它还是通往C++的必由之路。C有如下优点：

使用C语言的理由

在过去的30年中，C已经成为最重要和最流行的编程语言之一。它之所以得到发展，是因为人们尝试使用它后都喜欢它。在过去10年中，许多人从C转而使用更加强大的C++语言，但C有其自身的优势，任然是一种重要的语言，而且它还是通往C++的必由之路。现在我们首先看其中的优点。

设计特性

C是一种融合了控制特性的现代语言，而我们已发现在计算机科学的理论和实践中，控制特性是很重要的。其设计使得用户可以自然地采用自顶而下地规划、结构化地编程，以及模块化的设计。这种做法使得编写出的程序更可靠、更易懂。

高效性

可移植性

强大的功能和灵活性

很多的编译器和解释器都是用C编写的。

面向编程人员

缺点


As a modern language, C contet console.
C programmer is very effective.
C is cross-platform language.
It is turn out that C can use to do shthings about philos.
C allow you to access hadware.

来自《计算机科学导论》的知识

计算机的组成可以分为三大类：中央处理单元（Centrai Processing Unit）、主存储器（Main memory）和输入/输出子系统。

高级计算机语言和编译器

高级指令不能直接被计算机理解（只有机器语言才能被计算机所理解），这是出现编译器的原因。编译器是将高级语言程序解释称为计算机所需的详细机器语言指令集的程序。

使用C语言的7个步骤

使用C语言的步骤有7个，1th steps 是定义程序目标，2th step 设计程序，3th steps 编写代码，4th steps 编译， 5th steps 运行程序，6th steps 测试和调试程序 7th steps维护和修改程序。C编程的基本策略是使用程序将源代码文件转换为可执行文件，此文件包含可以运行的机器语言代码。C分两步完成这一工作：编译和链接。编译器将源代码转换为中间代码，链接器将此中间代码与其他代码相结合生成可执行文件。C使用被划分为两部分的这一方法使程序便于模块化。您可以分别编译各个模块，然后使用链接器将编译过的模块结合起来。

语言标准

随着C的发展和更加广泛地用于更多种类地系统上，使用C的群体意识到它需要一个更加全面、新颖和严格的标准。为了满足这一要求，美国国家标准组织（ANSI）在1983年设立了一个委员会（X3J11）以发展一个新的标准，该标准于1989年正式采用。这个新标准（ANSI C）定义了语言和一个标准C库。该委员有一些指导原则。委员会表示这一精神时列出了以下几点思想：

相信程序员；
不妨碍程序员做需要完成的事情；
让语言保持短小简单；
只提供一种方法来执行一个操作；
是程序运行速度快，即使不能保证其可移植性。

1994年，修订标准的工作开始了，这一努力的结果时产生了C99标准。一个联合ANSI/IOS委员会（即C9X委员会）签署了C90标准的最初原则，包括保持语言短小简单。他们的意图不是为语言添加新的特性，而是为了满足新的目标。新目标之一是支持国际化编程，例如提供了国际字符集的方法。第二个目标时“整理现有的惯例以解决明显的缺点”。第三目标是针对科学和工程项目的重要数字计算改进C的适应能力。委员会表示“……委员会希望C++成为重要的强有力的语言”。

C语言概述

实例说明

处于程序的第一行的语句的作用相当于您在文件中该行所在的位置键入了文件stdio.h的完整内容。实际上，它是一种剪切和粘贴操作，这样可以方便地在多个程序间共享公用的信息。

#include语句是C预处理指令（preprocessor directive）的一个例子。通常，C编译器在编译前要对源代码做一些准备公告；这称为预处理（preprocesing）。

stdio.h文件作为所有C编译包的一部分，它包含了有关输入和输出函数的信息以供编译器使用。这个名字代表标准输入输出头文件（standard input/output header）。在C世界中，人们称出现在文件顶部的信息集合为头（header），C实现通常都带许多头文件。

最重要的是头文件包括了建立最终的可执行程序时编译器需要用到的信息。例如，它们可以定义常量，或者说明函数名以及该函数如何使用。

ISO/ANSI C 已经对必须提供那些头文件制定了标准。一个具体C实现的稳定应该包括对C函数库中函数的描述。这些描述指出函数所需的头文件。

int main(void)

该行代码声明了一个main函数。一个C程序总是从被称为main（）的函数开始执行的。

有两种形式的注释。使用注释的目的时使人们更容易理解您的程序。

花括号划定了main函数的界限。通常，所有的C函数都是用花括号来表示函数体的开始和结束。它们的存在使必不可少的。

int num;

程序中的这一行叫做声明语句（declaration statement）。该声明语句使C语句中最重要的功能之一。这个特殊的例子声明两件事情。第一，在函数中您有一个名为num的变量。第二，int说明num是一个整数。编译器使用这个信息为变量num在内存中分配一个合适的存储空间。句末的分号指明这一行是C语言的一个语句或指令。

单词int是C语言的一个关键字，它代表C中最基本的一个数据类型。关键字是用来表达语言的单词，您不能将它们用于其他目的。

本例的单词num是一个标识符（identifier），也就是一个变量、函数或其他实体所选的名字。这样该声明把一个特殊的标识符和计算机内存中的一个特殊的位置联系起来，同时确定了该位置存储的信息类型。

在C语言中，所有变量都必须在使用之前定义。

传统上，C语言要求必须在一个代码块的开始处声明变量，在这之前不允许任何其他语句。现在C99遵循C++的惯例，允许把声明放在代码块中的任何位置。然而，在首次使用变量之前任然必须先声明它。

C语言可以处理多个数据种类，例如整数、字符和浮点数。把一个变量声明为整数类型或字符类型是计算机正确地存储、获取和解释该数据地基本前提。

您应该尽量使用有意义地变量名。

num = 1;

这行语句是复制语句（assignment statement）。赋值语句是C语言地基本操作之一。

printf("I an a simple");

这行使用了C语言的一个标准函数：printf()。圆括号表面printf是一个函数名。圆括号中包括的内容是从函数main（）传递到printf（）的信息。这样的信息被称为参数（argument），更完整的名称是函数的实际参数（actual argument）。

这是一个如何哎C语言中调用（call）和请求（invoke）一个函数的例子。只需键入函数的名字，吧所需的一个或多个参数放进圆括号中。当程序运行到改行，控制权将转给该函数。当函数完成了它所要做的工作，控制器返回给原来的函数（调用函数），在这个例子中是mian（）。

换行符是转义字符（Escape Sequence）的一个例子。转移字符通常用于代表难以表达或是无法键入的字符。其他的例子比如\t代表Tab键，\b代表退格键。

return 0;

这是程序的最后一个语句。

一个简单程序的结构

程序（program）由一个或多个函数组成（而函数是用于完成特定任务的程序代码的自包含单元）（反过来，函数是程序的构成模块），其中必须有一个名为main（）的函数。函数的描述由函数头和函数体组成。函数头包括预处理语句（如#include）和函数名。可以通过圆括号识别一个函数名，圆括号里面可能是空的。而函数体位于花括号中并由一系列语句组成，每个语句以一个分号结束。

使程序可读的技巧

让程序具有可读性是一个良好的编程习惯。除了选择有意义的变量名和使用注释，您还可以使用空行分隔一个函数的概念上的多个部分，每个语句用一行，提供对程序的描述等方法来使程序具有可读性。

调试

程序的错误通常叫做bugs，而发现和修改这些错误的过程叫调试（debugging）。
如果您不遵循C语言的规则就会犯语法错误。而语义错误是在意思上的错误。
通过手工方式一步一步地跟踪程序，并记录每个变量，这样就可以监视程序状态。程序状态（program state）是指在程序执行过程中地给定点上所有变量值的集合。它是当前计算状态的一个快照。
另一种查找语义错误的方法是，在程序的几个关键点加入额外的printf（）语句以监视所选变量的值。
检查程序状态的第三种方法是使用调试器。

关键字和保留标识符

关键概念

计算机编程是一件富有挑战性的事情。它需要抽象的、概念性的思考并细致地对待细节问题（这个过程实际上是设计算法）。您会发现编译器强迫您注意细节问题。

编译器是不会在下面讲到的这些概念性问题上帮助您，因此本书将通过强调每一章中的关键概念来弥补这一点。

对于本章，您的目标应该是理解什么是C程序。您可以这么理解：程序是对您希望计算机采取何种行为的描述（如果这种描述的目的是为了让人阅读方便，那么它的表示应该为UML或伪代码。为了这种描述的实现，您应该还需要掌握一些解决问题的策略。这些策略中，有两个广为人知，它是递归和循环。）。编译器负责把您的描述转化成底层的机器语言的细节工作。由于比那一起不具有真正的智能，所以必须把您对程序的描述用编译器的术语表达出来，这些术语就是C标准所设置的格式规则（即C语言的语法规则，这个规则是有标准的，其中一个标准是C99标准。）！

编译器希望收到特定格式的指令（统称为语言规则），这一点我们在本章中已经详细地讲述过。作为程序员，您地工作就是在一个编译器能成功处理地框架内表达出您关于程序应采取何种行为地想法。

（当我用语言规则这个词时，我应该想到，此时我想表达的是，一个语句有什么组成，语句的结束标志是什么，语句的分类等。具体到C语言，它有四种语句，分别是声明语句、赋值语句、函数调用语句、控制语句和返回语句，语句按复杂程度又可分为简单语句和复合语句。C语言的语法错误被分为两大类，语法和语义。每一个语句都是一个对计算机的指令。C语言为是使用者提供了大量的操作，用来完成算术计算、比较值的大小、修改变量、逻辑地组合关系，等等。C语言的循环算法的实现有三种，分别时while、do while和for，而它的控制结构有两种。）

在第8章中，作者提出的主题时I/O函数。

习题

1. 函数是C程序的基本模块。
2. 程序中的语句未遵循C语言规则时，这个错误成为语法错误。I apple. 12 = 23；

数据和C

将数字、文字和单词输入计算机，目的是希望计算机能处理这些数据。

变量和常量数据

数据：数据类型关键字

C数据类型

int类型

其他数据类型

使用数据类型

关键概念

C包大量数值类型，这体现了为程序员提供方便C的设计这一意图。比如对于整数，C并不认为一中整数已经足够，而是给予给程序员以多种选择（有符号和无符号），以最好的数值范围满足某个具体程序的需求。

计算机中，浮点数和整数有很大不同，它们的存储和运算都有很大区别。

计算机内存中用数值编码来表示字符。美国最常用的支付编码是ASCII码，C也支持其他编码的使用。字符常量是计算机系统所使用的数值编码的符号表示，它表示为单引号中的一个字符（如'A
）。
总结

C有多种数据类型。基本地数据类习惯包含两大类：整数类型和浮点类型。整数类型地两个重要特征是其类型地大小以及它是有符号还是无符号的。最小的整数类型是char，因实现不同可以是有符号或无符号的，可以使用signed char和unsigned char确定该类型的符号属性，不过这同行用于使用此类型表示小整数而非字符编码。其他的整数类型包括short、int、long和long long类型。对于上述类型的大小，C要求后面的类型不能小于前面的类型。上述类型都是有符号的，但可以使用unsigned官架子产生相应的无符号类型。最后，_Bool类型是一种无符号类型，它只包含两个值0和1，对应于false和true。

3种浮点类型为float、double和ANSI C新增的long double，后面类型的大小至少要和前面的类型一样大。有些实现中支持复数和虚数类型，方法是把_Complex和_Imaginary关键字同浮点类型关键字结合使用，例如double _Complex和float _Imaginary类型。

整数可以表示为十进制、八进制或十六进制形式。前缀0指示八进制数，前缀0x或0X指示十六进制数。

字符常量表示为放在单引号中的一个字符，比如'Q'、'8'和'$'。

浮点数恶意书写为小数点固定的形式，比如9393.912;或者书写为指数形式，比如7.38E10。

printf（）函数通过对应于各种累心过的转换说明符打印相应类型的数据。象时最简单的转换说明符由一个百分号和一个指示类型的字符组成，比如%d和%f。

字符串和格式化输入/输出

我可以有与用户交互和按照自己的需求和爱好编排输出格式所必须的工具，当我有printf()函数和scanf()函数。

字符串介绍

character string is a sequence that have one or more character.

字符串的使用

strlen（）函数

strlen() use to caculation how much character at a character string.

string.h文件包含许多与字符串有关的函数原型，包括strlen()。

printf（）函数

那些形如%d的字符，被称为转换说明。一些printf函数的常用转换说明有%c、%d、%e、%E、%f、%s、%p、%u、%o、%x和%X。

以下是printf（）的使用格式：

printf(Control-string, item1, item2, ...);

item1，item2等等都是要打印的项目。它们可以是变量，也可以是常量，甚至可以是在打印之前进行计算的表达式。control-string是一个描述项目如何打印的字符串。该字符串包含为每一个要打印的项目提供一个转换说明符。 

修饰符是在%和转换字符之间，对基本的转换说明起修饰作用的字符。

常用的修饰符有-、+、（空格）、#、0、digit(s)、.digit(s)、h、hh、l、ll、L和z。

从本质上说，转换说明就是翻译说明。

printf()函数的返回值是所打印的项目的个数。

scanf（）函数的转换说明符和修饰符都是printf（）函数的转换说明符和修饰符的子集。

运算符、表达式和语句

C提供了大量的操作，为了处理输出到计算机的数据。我可以进行算术计算、比较值大小、修改比哪里、逻辑地组合关系，等等。处理数据的另一个方面是组织您的程序，以使程序能以正确的顺序执行正确的步骤。C有几个语言特性来帮助我组织程序的任务。其中之一使循环。

基本运算符

C使用运算符（operator）来表达算术运算。

几个术语：数据对象、左值、右值和操作数

运算符的优先级

增量和减量运算符有很高的结合优先级；只有圆括号比它们的优先级高。

优先级和求值顺序

 y = 6 * 12 + 5 * 20

 当 n++ 是表达式的一部分时，您可以认为它表示“先使用n；然后将它的值增加”，另一方面，++n 的意思是“先将n值增加，然后在使用它”。

其他运算符

sizeof、取模运算符

增量和减量运算符

通过如下原则，您可以很容易避免这些问题：
1）如果一个变量出现在同一个函数的多个参数红，不要讲增量或减量运算符用于它之上。
2）当一个变量多次出现在一个表达式里面时，不要讲增量或减量运算符用到它上面。

表达式和语句

表达式（expression）是运算符和操作数的组合构成的。
最简单的表达式是一个单独的操作数，以此作为基础可以简历复杂的表达式。下面是一些表达式：
4
-6
4 + 12
a * (b +ｃ／ｄ）／２０
q = 5 * 2
x = ++q % 3
q > 3

C的重要属性是每一个C表达式都有一个值。

语句

语句（statement）是构造程序的基本成分。程序（program）是一系列带有某种必须的标点的语句集合。

什么构成了一条完整的指令？首先，C把任何后面加有一个分号的表达式看做是一个语句。所以，C将不反对下像下面的各行：
x = 25;
++x;
y = sqrt(x);
但这些语句对您的程序不做任何事情，不能被认为是有作用的语句。更典型的，语句会改变和调用函数。

赋值语句被许多程序员广为使用。它是表达式语句的一个特例。

函数语句引起函数的执行。

副作用（side effect）是对数据对象或文件的修改。

顺序点（sequence point）是程序执行中的一个点：在该点处，所有的副作用都在进入下一步前被计算。在C语言中，语句里的分号标志了一个顺序点。

完整表达式

一个完整表达式是这样一个表达式——它不是一个更大的表达式的字表达式。

复合语句

类型转换

通常您应该避免自动类型转换，尤其避免降级。

带有参数的函数

C99对于参数与参量的规定：对于实际参数或者实际参量使用数据参数，对形式参数或者形式参量使用术语参量。

关键概念

C有多种运算符。总的来说，一个运算符作用于一个或多个操作数来产生一个值。带一个操作数的运算符称为一元运算符。要求两个操作数的运算符称为二元运算符。

表达式是运算符和操作数的组合。在C里，每一个表达式都有一个值，其中包括赋值表达式和比较表达式。

语句是对计算机的完整指示，在C中通过一个分号来标识。到目前，您已经使用了声明语句、赋值语句、函数调用语句和控制语句。

当您定义了一个接受一个参数的函数时，您在函数定义里生命了一个参量。然后函数调用中传入的值会赋给该变量，现在就可以爱函数里使用该值额。

第6章 C控制语句：循环

C强壮、聪明、全能和有用，当C有一套对程序流的控制工具。
根据计算机科学，一种好的语言应该能够提供以下三种形式的程序流：
1）顺序执行语句序列
2）在满足某个条件之前反复执行一个语句序列
3）通过一个判断哎两个可选的语句序列之间选择执行。

While循环时第二种形式的一个例子。本章将详细地介绍while循环以及另外两种循环结构for循环和do while循环。本章也介绍了数组，因为它使您可以运用有感循环地新知识，本章还继续介绍有关函数地知识。我们首先冲学习while循环开始。

while(expression)
	statement
relational expresssion relational operator

C99提供表示真/假的变量的类型，_Bool类型。

for

do while

我们需要一些手段里控制和组织程序中的项目，比如if和switch，当处理一些更复杂的任务。

if语句被称为branching statement or selection statement。

if (expression)
	statement
using if and else together.

getchar()和putchar()是一对专门为面向字符I/O而设计的C函数。

它们通常只是预处理器macro，而不是真正的函数。

ctype.h包含了可以用来分析字符的函数。

logi operator && || !

condition operator ?:

continue and break

在计算机世界中，我们很多场合下都使用词语输入和输出。I/O函数将信息传输至程序并从程序中传出信息。

many program have a charlenge is combai input that is mach mind of deverloper.

buffered fully buffered line-buffered I/O

输入字符的立即回显是非缓冲（unbuffered）或直接（direct）输入的一个实例，它表示您所键入的字符对真该等待的程序立即变为可用。相反，延时回显是缓冲（buffered）输入的实例，这种情况下您所键入的字符被手机并存储在一个被称为缓冲区（buffer）的临时存储区域中。按下回车可使您所键入的字符块对程序变为可用。

缓冲分为两类：完全缓冲（fully buffered）I/O 和行缓冲（line-buffered）I/O。to fully buffered I/O，clear when buffered area is fully. 这种类型的缓冲通常出现文件输入中。缓冲区的大小取决于系统，但512字节和4096字节是常见的值。对行缓冲I/O来说，遇到一个换行符将被清空缓冲区。键盘输入的标准的行缓冲，因此按下回车键将清空缓冲区。

file, stream and keyboard input

文件时一块存储信息的存储器区域。通常，文件被保存在某种类别的永久存储器上，例如软盘、硬盘和磁带。

C语言具有许多用于打开、读、写和关闭文件的库函数。C语言使用被称为标准I/O包来提供这些操作，而不是低级I/O。

从概念上说，C程序处理一个流而不是直接处理文件。流（stream）时一个理想化的数据流，实际输入或输出映射到这个数据流。这意味着具有不同属性的多种类型的输入由流表示，会具有更多统一的属性。于是打开文件的过程就成为将流与文件相关联，并通过流进行读写的过程。

C对待输入和输出小河边与其对待存储设备上的普通文件相同。特别的是，键盘和显示设备作为每个C程序自动打开的文件来对待。键盘输入由一个被称为stdin的流表示，而到屏幕（或者电传打印机、或者其他输出设备）上的输出有一个被称为stdout的流表示。getchar（）、putchar（）、printf（）和scanf（）函数都是标准I/O包的成员，这些函数同这两个流打交道。

文件结尾

对所有文件，Unix让操作系统存储文件大小的信息，当程序读取足够的字节，则程序就到达了文件尾。MS-DOS家族对二进制文件使用该方法。

C的处理方法时让getchar（）函数在达到文件结尾时返回一个特殊值，而不管操作系统时如何检测文件结尾的。该值时EOF。scanf（）函数在检测到文件结尾时也返回EOF。

EOF在stdio.h文件中的定义为

#define EOF (-1)

对于标准输入，键入Ctrl+D会导致传送文件结尾信号，在大多Unix系统上。

输入和输出涉及到函数、数据和设备。

令程序和文件一同工作由两种方式。一种方式时明确地打开文件、关闭文件、读文件、写文件等等的专门函数。第二种方式时使用一个设计用于键盘和屏幕共同过着的程序，但是使用不同通带重定向（redirect）输入和输出。例如输入到文件和从文件中的输出。换句话说，就是您将stdin流重新分配至文件。

程序通常希望某种特定形式的输入。

对一个小程序来说，输入确认可能是代码中最复杂的部分。

地址运算符：&

C中最重要的概念之一就是指针（pointer），也就是用来存储地址的变量。一般的，当需要改变调用函数中的参数时，任何被调用的无返回值C函数都需要使用地址参数来完成该任务。在讨论使用地址参数的函数前，我们首先讨论一元运算符&的使用方法。

一元运算符&可以取得变量的存储地址。

现在，我们可以讨论如何使用一个函数来改变另一个函数中的变量。

指针介绍

指针时一个其数值为地址的变量（更一般得说时一个数据对象）。

正如int类型变量表示整数一样，指针变量的数值表示地址。

要创建一个指针变量，首先需要声明其类型。

简介运算符：*

指针声明

int * pi;
char * pc;
float * pf;


关键概念

想要用C编写出灵活高效的程序，您必须正确理解函数的使用。把较大的程序组织成若干个函数的形式是很有用，甚至是很关键。如果每个函数实现了某一特定功能，那么，这样的程序既易于理解又便于调试。另外，您还需要理解函数之间的信息传递机制，也就是明白函数参数以及返回值是如何工作的。因为函数的参数和其他局部变量是函数所私有的，所以在不同函数中声明的同名变量是完全不同的。而且任何函数不同直接访问其他函数中声明的变量。这种操作的局限性有助于保护数据的完整性。然而，当确实需要在一个函数中访问其他函数中的数据时，可以使用指针参数。

函数

如何组织一个程序？C的设计原则是把函数作为程序的构成模块。

函数概述

函数是用于完成特定任务的程序代码的自包含单元。在C函数中，有些函数会导致执行某些动作；还有一些函数能返回一个值以供程序使用，一般来讲，一个函数可同时具备以上两种功能。

如果设计的函数足够通用化，那么还可以在其他程序中调用它们。

许多程序员细化把函数看作“黑盒子”，即对应一定的输入会产生特定的结果或返回某个数值，而黑盒的内部行为并不需要考虑，除非是该函数的编写者。

对于函数，我们需要掌握如何正确的定义函数、如何调用函数和建立函数间的通信。

函数同变量一样有多种类型。任何程序在使用函数之前都需要声明该函数的类型，ANSI C的声明还包括的参数的类型和参数的数目。函数的类型声明被认为时函数定义的一个部分。

函数调用

函数调用中，通过使用实际参数对形式参数赋值。

因为被调用函数使用的值是从调用函数中复制而来的，所以不管在被调用函数中对复制数值进行什么操作，调用函数中的原数值不会受到任何影响，这种方式体现了从调用函数到被调函数的通信方式。

当需要从被调函数到调用函数的通信时，可以使用函数返回值。

为了检测某个函数的执行结果而编写的简单main（）函数，称为用来测试函数的驱动程序（driver）。

C允许一个函数调用其本身。这种调用过程被称为递归（recursion）。

头文件的使用

头文件的使用可以为模块化提供帮助。另外，把函数原型和常量定义放在一个头文件中是一个很好的编程习惯。

指针时用来存储地址的变量。一元运算符&可以取得变量的存储地址。

指针的声明需要指明该指针所指向的变量的类型。

我可以肯定，从本书的第6章开始，才有我感兴趣的内容。

在第6章的关键概念中，作者写道：循环是一个强大的编程工具。在建立循环时应该特别注意三个方面：
1）明确定义结束循环的条件
2）确保在循环判断中使用的值在第一次使用之前已经初始化
3）确保循环在每个周期中更新了判断值
数组由相同类型的邻近的内存位置组成。您需要谨记数组是从0开始编号的，这样最后一个元素的下标就比元素的个数少1.C并不检查您是否使用了合法的下标值，所以这需要您自己来负责。
使用一个函数需要完成三个单独的步骤：
1）使用函数原型声明该函数
2）在程序中通过函数调用来使用该函数
3）定义函数
原型使编译器可以检查您是否正确地使用了函数，而定义则规定了函数如何工作。现在的编程习惯使把程序的元素分为接口和实现部分，原型和定义就是这样的例子。接口部分描述了如何使用一个特性，这正是原型所做的；而实现部分说明了采取的就动作，这就是定义所做的。